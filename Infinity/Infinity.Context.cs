//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Infinity
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class InfinityEntities : DbContext
    {
        public InfinityEntities()
            : base("name=InfinityEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Address> Address { get; set; }
        public DbSet<BackOrderPartCondition> BackOrderPartCondition { get; set; }
        public DbSet<BadContentType> BadContentType { get; set; }
        public DbSet<BankAccount> BankAccount { get; set; }
        public DbSet<BlackList> BlackList { get; set; }
        public DbSet<Brand> Brand { get; set; }
        public DbSet<CarBrands> CarBrands { get; set; }
        public DbSet<CarSeries> CarSeries { get; set; }
        public DbSet<City> City { get; set; }
        public DbSet<Comment> Comment { get; set; }
        public DbSet<Country> Country { get; set; }
        public DbSet<Coupon> Coupon { get; set; }
        public DbSet<CouponValidOfferable> CouponValidOfferable { get; set; }
        public DbSet<CouponValidOfferableType> CouponValidOfferableType { get; set; }
        public DbSet<DeliveryMethod> DeliveryMethod { get; set; }
        public DbSet<DeliveryType> DeliveryType { get; set; }
        public DbSet<EPaymentBank> EPaymentBank { get; set; }
        public DbSet<Feedbak> Feedbak { get; set; }
        public DbSet<Field> Field { get; set; }
        public DbSet<FieldType> FieldType { get; set; }
        public DbSet<ForbiddenPhrase> ForbiddenPhrase { get; set; }
        public DbSet<Grocery> Grocery { get; set; }
        public DbSet<LoginHistory> LoginHistory { get; set; }
        public DbSet<Off> Off { get; set; }
        public DbSet<Offerable> Offerable { get; set; }
        public DbSet<OfferableCategories> OfferableCategories { get; set; }
        public DbSet<OfferableDeliveryMethod> OfferableDeliveryMethod { get; set; }
        public DbSet<OfferablePicture> OfferablePicture { get; set; }
        public DbSet<OfferableType> OfferableType { get; set; }
        public DbSet<OfferableTypeBrand> OfferableTypeBrand { get; set; }
        public DbSet<OfferableTypeProperty> OfferableTypeProperty { get; set; }
        public DbSet<OfferableTypePropertyValue> OfferableTypePropertyValue { get; set; }
        public DbSet<OfferableVariation> OfferableVariation { get; set; }
        public DbSet<Order> Order { get; set; }
        public DbSet<OrderItem> OrderItem { get; set; }
        public DbSet<PaymentMethod> PaymentMethod { get; set; }
        public DbSet<Penalty> Penalty { get; set; }
        public DbSet<Person> Person { get; set; }
        public DbSet<Picture> Picture { get; set; }
        public DbSet<PredefinedListValue> PredefinedListValue { get; set; }
        public DbSet<Price> Price { get; set; }
        public DbSet<Province> Province { get; set; }
        public DbSet<QuantityOff> QuantityOff { get; set; }
        public DbSet<Region> Region { get; set; }
        public DbSet<ReturnBack> ReturnBack { get; set; }
        public DbSet<ReturnBackResult> ReturnBackResult { get; set; }
        public DbSet<Role> Role { get; set; }
        public DbSet<SaleTerm> SaleTerm { get; set; }
        public DbSet<SearchHistory> SearchHistory { get; set; }
        public DbSet<SearchResult> SearchResult { get; set; }
        public DbSet<ServiceProvider> ServiceProvider { get; set; }
        public DbSet<Setting> Setting { get; set; }
        public DbSet<SPActivityField> SPActivityField { get; set; }
        public DbSet<SPCategory> SPCategory { get; set; }
        public DbSet<SPDeliveryMethod> SPDeliveryMethod { get; set; }
        public DbSet<SPPaymentMethod> SPPaymentMethod { get; set; }
        public DbSet<sysdiagrams> sysdiagrams { get; set; }
        public DbSet<Tag> Tag { get; set; }
        public DbSet<Term> Term { get; set; }
        public DbSet<Transaction> Transaction { get; set; }
        public DbSet<TransactionDetail> TransactionDetail { get; set; }
        public DbSet<User> User { get; set; }
        public DbSet<UserRole> UserRole { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int usp_GetAllCarBransAsXML()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetAllCarBransAsXML");
        }
    
        public virtual int usp_getBadContentTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_getBadContentTypes");
        }
    
        public virtual ObjectResult<usp_GetGroceries_Result> usp_GetGroceries(Nullable<int> categoryId, Nullable<int> customerRoleId)
        {
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            var customerRoleIdParameter = customerRoleId.HasValue ?
                new ObjectParameter("CustomerRoleId", customerRoleId) :
                new ObjectParameter("CustomerRoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetGroceries_Result>("usp_GetGroceries", categoryIdParameter, customerRoleIdParameter);
        }
    
        public virtual ObjectResult<usp_GetOfferableCategories_Result> usp_GetOfferableCategories(Nullable<int> parentID, string title)
        {
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetOfferableCategories_Result>("usp_GetOfferableCategories", parentIDParameter, titleParameter);
        }
    
        public virtual ObjectResult<string> usp_GetOfferableCategoriesAsXml(Nullable<int> parentID, string title)
        {
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_GetOfferableCategoriesAsXml", parentIDParameter, titleParameter);
        }
    
        public virtual int usp_getOfferableTypeProperties(Nullable<int> offerableTypeId)
        {
            var offerableTypeIdParameter = offerableTypeId.HasValue ?
                new ObjectParameter("OfferableTypeId", offerableTypeId) :
                new ObjectParameter("OfferableTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_getOfferableTypeProperties", offerableTypeIdParameter);
        }
    
        public virtual int usp_GetOfferableTypesByCategory(Nullable<int> categoryId)
        {
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetOfferableTypesByCategory", categoryIdParameter);
        }
    
        public virtual int usp_GetOfferableTypesByCategoryAsXml(Nullable<int> categoryId)
        {
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetOfferableTypesByCategoryAsXml", categoryIdParameter);
        }
    
        public virtual int usp_GetPartConditionsAsXml()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetPartConditionsAsXml");
        }
    
        public virtual int usp_getPartsAsXml(string criteria, string technicalNo, string chasisNo, Nullable<int> carBrandId, Nullable<int> carSerieId, Nullable<int> carSerieYearId, Nullable<int> partCategoryId, Nullable<int> provinceId, Nullable<int> cityId, Nullable<int> vehicleTypeId, string @operator)
        {
            var criteriaParameter = criteria != null ?
                new ObjectParameter("Criteria", criteria) :
                new ObjectParameter("Criteria", typeof(string));
    
            var technicalNoParameter = technicalNo != null ?
                new ObjectParameter("TechnicalNo", technicalNo) :
                new ObjectParameter("TechnicalNo", typeof(string));
    
            var chasisNoParameter = chasisNo != null ?
                new ObjectParameter("ChasisNo", chasisNo) :
                new ObjectParameter("ChasisNo", typeof(string));
    
            var carBrandIdParameter = carBrandId.HasValue ?
                new ObjectParameter("CarBrandId", carBrandId) :
                new ObjectParameter("CarBrandId", typeof(int));
    
            var carSerieIdParameter = carSerieId.HasValue ?
                new ObjectParameter("CarSerieId", carSerieId) :
                new ObjectParameter("CarSerieId", typeof(int));
    
            var carSerieYearIdParameter = carSerieYearId.HasValue ?
                new ObjectParameter("CarSerieYearId", carSerieYearId) :
                new ObjectParameter("CarSerieYearId", typeof(int));
    
            var partCategoryIdParameter = partCategoryId.HasValue ?
                new ObjectParameter("PartCategoryId", partCategoryId) :
                new ObjectParameter("PartCategoryId", typeof(int));
    
            var provinceIdParameter = provinceId.HasValue ?
                new ObjectParameter("ProvinceId", provinceId) :
                new ObjectParameter("ProvinceId", typeof(int));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var vehicleTypeIdParameter = vehicleTypeId.HasValue ?
                new ObjectParameter("VehicleTypeId", vehicleTypeId) :
                new ObjectParameter("VehicleTypeId", typeof(int));
    
            var operatorParameter = @operator != null ?
                new ObjectParameter("Operator", @operator) :
                new ObjectParameter("Operator", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_getPartsAsXml", criteriaParameter, technicalNoParameter, chasisNoParameter, carBrandIdParameter, carSerieIdParameter, carSerieYearIdParameter, partCategoryIdParameter, provinceIdParameter, cityIdParameter, vehicleTypeIdParameter, operatorParameter);
        }
    
        public virtual int usp_GetPartsByCarInfoAndCategoryAsXml(Nullable<int> carBrandId, Nullable<int> carSerieId, Nullable<int> carSerieYearId, Nullable<int> partCategoryId, Nullable<int> provinceId, Nullable<int> cityId)
        {
            var carBrandIdParameter = carBrandId.HasValue ?
                new ObjectParameter("CarBrandId", carBrandId) :
                new ObjectParameter("CarBrandId", typeof(int));
    
            var carSerieIdParameter = carSerieId.HasValue ?
                new ObjectParameter("CarSerieId", carSerieId) :
                new ObjectParameter("CarSerieId", typeof(int));
    
            var carSerieYearIdParameter = carSerieYearId.HasValue ?
                new ObjectParameter("CarSerieYearId", carSerieYearId) :
                new ObjectParameter("CarSerieYearId", typeof(int));
    
            var partCategoryIdParameter = partCategoryId.HasValue ?
                new ObjectParameter("PartCategoryId", partCategoryId) :
                new ObjectParameter("PartCategoryId", typeof(int));
    
            var provinceIdParameter = provinceId.HasValue ?
                new ObjectParameter("ProvinceId", provinceId) :
                new ObjectParameter("ProvinceId", typeof(int));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetPartsByCarInfoAndCategoryAsXml", carBrandIdParameter, carSerieIdParameter, carSerieYearIdParameter, partCategoryIdParameter, provinceIdParameter, cityIdParameter);
        }
    
        public virtual int usp_GetPriceTypesAsXml()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetPriceTypesAsXml");
        }
    
        public virtual int usp_GetProvincesAsXml()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetProvincesAsXml");
        }
    
        public virtual int usp_GetSPCategoriesAsXml(Nullable<int> parentID, string title)
        {
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetSPCategoriesAsXml", parentIDParameter, titleParameter);
        }
    
        public virtual int usp_GetSPTypesByCategoryAsXml(Nullable<int> categoryId)
        {
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetSPTypesByCategoryAsXml", categoryIdParameter);
        }
    
        public virtual int usp_GetVehicleTypeId(string vehicleCategoryId)
        {
            var vehicleCategoryIdParameter = vehicleCategoryId != null ?
                new ObjectParameter("VehicleCategoryId", vehicleCategoryId) :
                new ObjectParameter("VehicleCategoryId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetVehicleTypeId", vehicleCategoryIdParameter);
        }
    
        public virtual int usp_insertOfferablePicture(Nullable<int> offerableId, string pictureUrl, string alternate, string description)
        {
            var offerableIdParameter = offerableId.HasValue ?
                new ObjectParameter("OfferableId", offerableId) :
                new ObjectParameter("OfferableId", typeof(int));
    
            var pictureUrlParameter = pictureUrl != null ?
                new ObjectParameter("PictureUrl", pictureUrl) :
                new ObjectParameter("PictureUrl", typeof(string));
    
            var alternateParameter = alternate != null ?
                new ObjectParameter("Alternate", alternate) :
                new ObjectParameter("Alternate", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_insertOfferablePicture", offerableIdParameter, pictureUrlParameter, alternateParameter, descriptionParameter);
        }
    
        public virtual ObjectResult<usp_GetGroceryDetails_Result> usp_GetGroceryDetails(Nullable<int> groceryId, Nullable<int> categoryId, Nullable<int> customerRoleId)
        {
            var groceryIdParameter = groceryId.HasValue ?
                new ObjectParameter("GroceryId", groceryId) :
                new ObjectParameter("GroceryId", typeof(int));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            var customerRoleIdParameter = customerRoleId.HasValue ?
                new ObjectParameter("CustomerRoleId", customerRoleId) :
                new ObjectParameter("CustomerRoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetGroceryDetails_Result>("usp_GetGroceryDetails", groceryIdParameter, categoryIdParameter, customerRoleIdParameter);
        }
    
        public virtual int old_usp_GetPriceTypesAsXml()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("old_usp_GetPriceTypesAsXml");
        }
    
        public virtual int old_usp_GetSPCategoriesAsXml(Nullable<int> parentID, string title)
        {
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("old_usp_GetSPCategoriesAsXml", parentIDParameter, titleParameter);
        }
    
        public virtual int old_usp_GetSPTypesByCategoryAsXml(Nullable<int> categoryId)
        {
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("old_usp_GetSPTypesByCategoryAsXml", categoryIdParameter);
        }
    
        public virtual ObjectResult<usp_GetGroceryPictures_Result> usp_GetGroceryPictures(Nullable<int> offerableId)
        {
            var offerableIdParameter = offerableId.HasValue ?
                new ObjectParameter("OfferableId", offerableId) :
                new ObjectParameter("OfferableId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetGroceryPictures_Result>("usp_GetGroceryPictures", offerableIdParameter);
        }
    
        public virtual ObjectResult<usp_userLogin_Result> usp_userLogin(string username, string password, Nullable<int> sPId)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var sPIdParameter = sPId.HasValue ?
                new ObjectParameter("SPId", sPId) :
                new ObjectParameter("SPId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_userLogin_Result>("usp_userLogin", usernameParameter, passwordParameter, sPIdParameter);
        }
    }
}
